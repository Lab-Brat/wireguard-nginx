---
- hosts: all
  become: yes
  tasks:
    - name: Prepare system pacakges.
      block:
        - name: Remove cockpit packages.
          ansible.builtin.dnf:
            name: "{{ item}}"
            state: absent
          with_items:
            - cockpit-bridge
            - cockpit-ws
            - cockpit-system

        - name: Load ip_tables kernel module.
          community.general.modprobe:
            name: ip_tables
            state: present
            persistent: present

        - name: Update all packages.
          ansible.builtin.dnf:
            name: '*'
            state: latest
          notify: Reboot host and wait for it to restart.

        - name: Flush handlers.
          ansible.builtin.meta: flush_handlers

    - name: Install Docker.
      block:
        - name: Add Docker repository.
          ansible.builtin.yum_repository:
            file: docker-ce
            name: docker-ce
            description: 'Docker CE Stable - $basearch'
            baseurl: "https://download.docker.com/linux/centos/$releasever/$basearch/stable"
            enabled: 1
            gpgcheck: 1
            gpgkey: "https://download.docker.com/linux/centos/gpg"

        - name: Install Docker.
          ansible.builtin.dnf:
            name: "{{ item }}"
            state: latest
          with_items:
            - docker-ce
            - docker-ce-cli
            - containerd.io
            - docker-compose-plugin

        - name: Start Docker service.
          ansible.builtin.service:
            name: docker
            state: started
            enabled: true

    - name: Configure wg-easy.
      block:
        - name: Include variables.
          ansible.builtin.include_vars:
            file: vars.yaml
            name: wg_vars

        - name: Add env vars to .bashrc.
          ansible.builtin.lineinfile:
            dest: ~/.bashrc
            line: "{{ item }}"
          loop:
            - "export WG_HOSTNAME={{ wg_vars.wg_hostname }}"
            - "export WG_UI_PWD={{ wg_vars.wg_ui_password }}"

        - name: Create a directory for Docker compose.
          ansible.builtin.file:
            path: /opt/wireguard
            state: directory
            mode: '0755'

        - name: Copy Docker Compose file to new dir.
          ansible.builtin.copy:
            src: files/compose.yaml
            dest: /opt/wireguard

        - name: Create a directory for Nginx configs.
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          with_items:
            - /opt/wireguard/nginx
            - /opt/wireguard/letsencrypt

        - name: Template nginx config.
          ansible.builtin.template:
            src: templates/wg-easy.conf.j2
            dest: /opt/wireguard/nginx/wg-easy.conf
            owner: root
            group: root
            mode: '0644'

        - name: Start Docker Compose.
          ansible.builtin.command: docker compose up -d
          environment: 
            WG_UI_PWD: "{{ wg_vars.wg_ui_password }}"
            WG_HOSTNAME: "{{ wg_vars.wg_hostname }}"
          args:
            chdir: /opt/wireguard

        - name: Check if the certificate is valid.
          ansible.builtin.uri:
            url: https://{{ wg_vars.wg_hostname }}
            method: HEAD
          register: cert_status
          ignore_errors: yes

        - name: Show cert status.
          ansible.builtin.debug:
            var: cert_status

    - name: Install TCL cert.
      block:
        - name: Generate certificates.
          ansible.builtin.command: >
            docker exec -it nginx
            certbot --nginx --non-interactive --agree-tos -m webmaster@google.com -d {{ wg_vars.wg_hostname }}

        - name: Restart Nginx.
          ansible.builtin.command: >
            docker restart nginx
      when: cert_status.failed

  handlers:
    - name: Reboot host and wait for it to restart.
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 200
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami